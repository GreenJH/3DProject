// NeoPixel Ring simple sketch (c) 2013 Shae Erisson
// released under the GPLv3 license to match the rest of the AdaFruit NeoPixel library

#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
  #include <avr/power.h>
#endif

// Which pin on the Arduino is connected to the NeoPixels?
// On a Trinket or Gemma we suggest changing this to 1
#define PIN        	9

// How many NeoPixels are attached to the Arduino?
#define NUMPIXELS  	4

// When we setup the NeoPixel library, we tell it how many pixels, and which pin to use to send signals.
// Note that for older NeoPixel strips you might need to change the third parameter--see the strandtest
// example for more information on possible values.
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN);

int delayval = 500; // delay for half a second

void setup() {
Serial.begin(115200);

  pixels.begin(); // This initializes the NeoPixel library.
}

void loop() {



  // For a set of NeoPixels the first NeoPixel is 0, second is 1, all the way up to the count of pixels minus one.
if (Serial.available()) {
  byte c = Serial.read ();

  if (c == 'g') {
  for(int i=0;i<NUMPIXELS;i++){
	pixels.setPixelColor(i, pixels.Color(0,150,0));
	pixels.show();
	//delay(delayval);
  }
  }

  if (c == 'r')  {

	for(int i=0;i<NUMPIXELS;i++){
	pixels.setPixelColor(i, pixels.Color(255,0,0));
	pixels.show();
	//delay(delayval);
  }
  }

	if (c == 'p')  {

	for(int i=0;i<NUMPIXELS;i++){
	pixels.setPixelColor(i, pixels.Color(182,66,244));
	pixels.show();
	//delay(delayval);
  }
  }

  	if (c == 'o')  {

	for(int i=0;i<NUMPIXELS;i++){
	pixels.setPixelColor(i, pixels.Color(255,153,0));
	pixels.show();
	//delay(delayval);
  }
  }


   if (c == 'k')  {

	for(int i=0;i<NUMPIXELS;i++){
	pixels.setPixelColor(i, pixels.Color(255,51,153));
	pixels.show();
	//delay(delayval);
  }
  }

  if (c == 'a')  {

	for(int i=0;i<NUMPIXELS;i++){
	pixels.setPixelColor(i, pixels.Color(0,153,153));
	pixels.show();
	//delay(delayval);
  }
  }

  if (c == 'c')  {
	theaterChaseRainbow(100);
    
  }

	if (c == 'b')  {
	rainbowCycle(20);
    
  }

  if (c == ' ') {
  	for(int i=0;i<NUMPIXELS;i++){
	pixels.setPixelColor(i, pixels.Color(0,0,0));
	pixels.show();
	//delay(delayval);
  }
  }
}
}

void theaterChaseRainbow(uint8_t wait) {
  for (int j=0; j < 256; j++) { 	// cycle all 256 colors in the wheel
	for (int q=0; q < 3; q++) {
  	for (uint16_t i=0; i < pixels.numPixels(); i=i+3) {
    	pixels.setPixelColor(i+q, Wheel( (i+j) % 255));	//turn every third pixel on
  	}
  	pixels.show();

  	delay(wait);

  	for (uint16_t i=0; i < pixels.numPixels(); i=i+3) {
    	pixels.setPixelColor(i+q, 0);    	//turn every third pixel off
  	}
	}
  }
}

uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
  if(WheelPos < 85) {
	return pixels.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  }
  if(WheelPos < 170) {
	WheelPos -= 85;
	return pixels.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  WheelPos -= 170;
  return pixels.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}

void rainbowCycle(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256*5; j++) { // 5 cycles of all colors on wheel
	for(i=0; i< pixels.numPixels(); i++) {
  	pixels.setPixelColor(i, Wheel(((i * 256 / pixels.numPixels()) + j) & 255));
	}
	pixels.show();
	delay(wait);
  }
}
